{"version":3,"sources":["contexts/index.js","components/Quiz/QuizGraphQL.js","components/Consent/ConsentGraphQL.js","components/Consent/Consent.jsx","components/Quiz/Quiz.jsx","components/Qna/QnaGraphQL.js","components/Qna/Answer/Answer.jsx","misc/utils.js","components/Qna/Qna.jsx","components/Warmup/WarmupGraphQL.js","components/VideoPlayer/VideoPlayer.jsx","components/Warmup/Warmup.jsx","components/Score/Score.jsx","components/App.js","components/Error/Ajv.jsx","misc/serviceWorker.js","douane/lib/config.js","douane/lib/schema/index.js","douane/index.js","index.js"],"names":["JContext","React","createContext","GET_QUIZ","gql","GET_CONSENT","_Consent","consentData","this","id","get","identifier","title","description","actived","JSON","parse","Consent","props","useContext","gql_variables","scope","consent_status","variables","Object","assign","useQuery","loading","error","data","useState","consent","setConsent","consentGranted","setConsentGranted","useEffect","consentPath","consentPathStatus","consentPathRevokeDate","cxsConsentStatus","cxs","cxsConsentRevokeDate","GRANTED","Date","now","setGranted","granted","className","Form","Check","custom","type","name","label","onChange","handleChange","checked","icon","onClick","handleConsentStatus","DENIED","filter","item","Quiz","files_endpoint","language_bundle","setChecked","showNext","workspace","disabledStartBtn","setDisabledStartBtn","console","log","allConsentChecked","quiz","consents","checkedConsentIds","keys","consentIds2Check","activedConsentIds","map","consentId","includes","length","e","indexOf","target","typeIdentifier","status","statusDate","revokeDate","setFullYear","getFullYear","uTracker","track","toISOString","show","src","encodeURI","cover","alt","subtitle","duration","dangerouslySetInnerHTML","__html","Button","variant","forEach","onClickNext","disabled","btnStart","consentTitle","key","GET_QNA","Answer","isValid","answer","valid","qna","notUsedForScore","computedNbExpectedAnswer","getRandomString","format","mask","result","i","Math","floor","random","_Qna","qnaData","quiz_validMark","question","help","randomSelection","jExpField2Map","answers","substring","sort","a","b","reduce","push","Qna","setQna","disableSubmit","setDisableSubmit","disable","index","splice","resultSet","setResultSet","values","update","propertyName","propertyValue","btnSubmit","GET_WARMUP","VideoPlayer","videoURL","warmupID","content","player","useRef","collectEvent","game4Quiz","game4Warmup","game4Video","current","getDuration","currentTime","getCurrentTime","ref","url","controls","width","height","onStart","onPlay","onPause","onEnded","_Warmup","warmupData","videoLink","videoIntPath","childNodes","node","video","Warmup","warmup","setWarmup","nodesIds","addItem2Slides","btnQuestion","Score","value","score","text","library","add","fab","faClock","faHandPointLeft","faCheckCircle","faCheckDouble","faCheck","faTimesCircle","faTimes","faBan","Indicator","active","handleSelect","_Quiz","quizData","scoreIndex","App","context","setQuiz","showResult","setShowResult","setResult","slideIndex","setSlideIndex","setIndex","setCxs","ids","parentId","debug","position","bundle","initLanguageBundle","initialize","cdp_endpoint","sessionId","ready","window","Array","isArray","slice","max","showScore","score_splitPattern","getFinalScore","goodAnswers","Provider","Container","Row","correctAnswer","wrongAnswer","btnNextQuestion","btnShowResults","itemId","cnd_type","QNA","WARMUP","Ajv","errors","dataPath","message","Boolean","location","hostname","match","REVOKED","properties","host","default","process","enum","pattern","gql_endpoint","gql_authorization","language","required","additionalProperties","ajv","useDefaults","quizUIApp","validate","schema","toUpperCase","getGQLWorkspace","contextValidator","headers","Authorization","client","ApolloClient","uri","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8306f7d2.chunk.js","sourcesContent":["import React from 'react';\n\nexport const JContext = React.createContext(null);\n// export default CXSContextJs;","import {gql} from 'apollo-boost';\n\nexport const GET_QUIZ = gql`\n    query getQuiz($workspace: Workspace!, $id: String!, $language: String!) {\n        response: jcr(workspace: $workspace) {\n            quiz: nodeById(uuid: $id) {\n                id: uuid\n                type: primaryNodeType{\n                    value:name\n                }\n                key: property(name:\"game4:quizKey\"){\n                    value\n                }\n                title: displayName(language:$language)\n                subtitle: property(language:$language, name:\"game4:subtitle\"){\n                    value\n                }\n                description: property(language:$language,name:\"game4:description\"){\n                    value\n                }\n                duration: property(name:\"game4:duration\"){\n                    value\n                }\n                cover: property(name:\"game4:cover\"){\n                    node: refNode {\n                        path\n                    }\n                }\n                consents: property(name:\"game4:consentType\"){\n                    nodes: refNodes {\n                        id: uuid\n                        actived: property(language:$language,name:\"wem:activated\"){\n                            value\n                        }\n                    }\n                }\n                children{\n                    nodes {\n                        id: uuid\n                        type: primaryNodeType{\n                            value:name\n                        }\n                    }\n                },\n                btnStart: property(language:$language, name:\"game4:btnStart\"){\n                    value\n                },\n                btnSubmit: property(language:$language, name:\"game4:btnSubmit\"){\n                    value\n                },\n                btnQuestion: property(language:$language, name:\"game4:btnQuestion\"){\n                    value\n                },\n                btnNextQuestion: property(language:$language, name:\"game4:btnNextQuestion\"){\n                    value\n                },\n                btnShowResults: property(language:$language, name:\"game4:btnShowResults\"){\n                    value\n                },\n                consentTitle: property(language:$language, name:\"game4:consentTitle\"){\n                    value\n                },\n                correctAnswer: property(language:$language, name:\"game4:correctAnswer\"){\n                    value\n                },\n                wrongAnswer: property(language:$language, name:\"game4:wrongAnswer\"){\n                    value\n                }\n            }\n        }\n    }\n`\n\n\n","import {gql} from 'apollo-boost';\n\nexport const GET_CONSENT = gql`\n    query getConsent($workspace: Workspace!, $id: String!, $language: String!) {\n        response: jcr(workspace: $workspace) {\n            consent: nodeById(uuid: $id) {\n                id: uuid\n                identifier:name\n                title:displayName(language:$language)\n                description: property(language:$language, name:\"jcr:description\"){\n                    value\n                }\n                actived: property(language:$language,name:\"wem:activated\"){\n                    value\n                }\n            }\n        }\n    }\n`\n\n\n","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {Form} from \"react-bootstrap\";\nimport {JContext} from \"contexts\";\nimport {useQuery} from \"@apollo/react-hooks\";\nimport {GET_CONSENT} from \"components/Consent/ConsentGraphQL\";\nimport get from \"lodash.get\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\n\nclass _Consent{\n    //NOTE be sure string value like \"false\" or \"true\" are boolean I use JSON.parse to cast\n    constructor(consentData) {\n        this.id= get(consentData, \"id\");\n        this.identifier= get(consentData, \"identifier\");\n        this.title= get(consentData, \"title\");\n        this.description= get(consentData, \"description.value\");\n        this.actived= JSON.parse(get(consentData, \"actived.value\", false));\n    };\n}\n\nconst Consent = (props)=> {\n    const {gql_variables,scope,consent_status} =  React.useContext(JContext);\n    const variables = Object.assign(gql_variables,{id:props.id})\n    const {loading, error, data} = useQuery(GET_CONSENT, {\n        variables:variables,\n    });\n\n    const [consent, setConsent] = React.useState({});\n    const [consentGranted, setConsentGranted] = React.useState(false);\n    // const [checked, setChecked] = React.useState([]);\n\n    React.useEffect(() => {\n\n        if(loading === false && data){\n            const consentData = get(data, \"response.consent\", {});\n            // console.log(\"Consent \",consentData.id,\" : init\");\n            setConsent(new _Consent(consentData));\n        }\n\n    }, [loading,data]);\n\n    React.useEffect(() => {\n        //get consent value and check if it was approuved\n        //TODO verifier si workspace = LIVE et [si window.cxs sinon faire un setTimout? ou faire un status sur cxs loaded !]\n        const consentPath = `consents[\"${scope}/${consent.identifier}\"]`;\n        const consentPathStatus= `${consentPath}.status`;\n        const consentPathRevokeDate=`${consentPath}.revokeDate`;\n        const cxsConsentStatus = get(props.cxs,consentPathStatus);\n        const cxsConsentRevokeDate = get(props.cxs,consentPathRevokeDate);\n\n        // console.log(\"consent : \",consentPath,\" : \",consent_status.GRANTED);\n        // console.log(\"props.granted : \",props.granted);\n\n        // console.log(\"cxsConsentRevokeDate : \",cxsConsentRevokeDate);\n        // console.log(\"Date.parse(cxsConsentRevokeDate) : \",Date.parse(cxsConsentRevokeDate));\n        // console.log(\"Date.now() : \",Date.now());\n        if(consent_status.GRANTED === cxsConsentStatus\n            && Date.now() < Date.parse(cxsConsentRevokeDate)\n        ){\n            setConsentGranted(true);\n            props.setGranted([...props.granted,consent.id]);\n        }\n        // console.log(\"useEffect props.cxs\",props.cxs);\n    },[consent]);\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    const handleDenied = () => {\n        props.handleConsentStatus(consent.identifier,consent_status.DENIED);\n        setConsentGranted(false);\n        props.setGranted(props.granted.filter(item =>item !== consent.id));\n    }\n\n    // console.log(\"consent do\");\n    return(\n        <li>\n            {consent.actived && !consentGranted &&\n                <div className=\"consent-to-grant\">\n                    <Form.Check\n                        custom\n                        type=\"checkbox\"\n                        name={consent.identifier}\n                        id={consent.id}\n                        label={consent.title}\n                        onChange={props.handleChange}\n                        checked={props.checked}\n                    />\n                    <i>{consent.description}</i>\n                </div>\n            }\n            {consent.actived && consentGranted &&\n                <p className=\"consent-granted\">\n                    <FontAwesomeIcon icon={['fas','check']}/>\n                    {consent.title}\n                    <FontAwesomeIcon className=\"consent-denied\" icon={['fas','ban']} onClick={handleDenied}/>\n                    <i>{consent.description}</i>\n                </p>\n            }\n        </li>\n    )\n}\n\nConsent.propTypes={\n    id:PropTypes.string.isRequired,\n    checked:PropTypes.bool.isRequired,\n    setChecked:PropTypes.func.isRequired,\n    handleChange:PropTypes.func.isRequired,\n    cxs:PropTypes.object.isRequired,\n    setGranted:PropTypes.func.isRequired,\n    granted:PropTypes.array.isRequired,\n    handleConsentStatus:PropTypes.func.isRequired\n};\n\nexport default Consent;","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {Button} from \"react-bootstrap\";\n\nimport {JContext} from \"contexts\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Consent from \"components/Consent\";\nimport uTracker from \"unomi-analytics\";\n\nconst Quiz = (props) => {\n    const {files_endpoint,consent_status,scope,gql_variables,language_bundle} =  React.useContext(JContext);\n    //used for consent approval; list of consentID checked\n    //I use an array structure in case I want to use multiple consent in future\n    const [checked, setChecked] = React.useState({});\n    const [granted, setGranted] = React.useState([]);\n\n    const [disabledStartBtn, setDisabledStartBtn] = React.useState(!props.showNext && gql_variables.workspace === \"LIVE\");\n\n    React.useEffect(() => {\n        console.log(\" ** gql_variables.workspace !== 'LIVE'  : \",gql_variables.workspace !== \"LIVE\");\n        // console.log(\"*** Quiz checked OR granted useEffect : !props.showNext : \",!props.showNext);\n        //if nothing to show after return immediately\n        if(!props.showNext || gql_variables.workspace !== \"LIVE\")\n            return;\n\n        let allConsentChecked = false;\n        console.log(\" ** granted  : \",granted);\n\n        if(props.quiz.consents){\n            // console.log(\"*** granted :\",granted);\n            const checkedConsentIds = Object.keys(checked);\n            const consentIds2Check = [...granted,...checkedConsentIds];\n            const activedConsentIds = props.quiz.consents\n                .filter(consent => consent.actived)\n                .map(consent => consent.id);\n            const results = consentIds2Check.filter(consentId => activedConsentIds.includes(consentId));\n            allConsentChecked = results.length === activedConsentIds.length;\n        }\n        console.log(\"*** allConsentChecked :\",allConsentChecked);\n\n        setDisabledStartBtn(!allConsentChecked);\n\n    }, [checked,granted]);\n\n    const handleChange= (e) => {\n        // console.log(\"handleChange  target.id : \",e.target.id,\"; target.name : \",e.target.name);\n\n        //case checkbox\n        const index = Object.keys(checked).indexOf(e.target.id);\n\n        if(index === -1){//checked\n            setChecked({...checked, [e.target.id]:e.target.name } );\n\n        }else{//unchecked\n            delete checked[e.target.id]\n            setChecked({...checked});\n        }\n    }\n\n    const onCLick = (e) => {\n        Object.keys(checked).forEach(consentId => {\n            handleConsentStatus(checked[consentId],consent_status.GRANTED);\n        });\n        props.onClickNext();\n    };\n\n    const handleConsentStatus = (typeIdentifier,status) => {\n        const statusDate = new Date();\n        const revokeDate = new Date(statusDate);\n        revokeDate.setFullYear(revokeDate.getFullYear()+2);\n        console.log(\"handleConsentStatus status :\",status);\n\n\n            uTracker.track(\"modifyConsent\",{\n                consent: {\n                    typeIdentifier,\n                    scope,\n                    status,\n                    statusDate: statusDate.toISOString(),//\"2018-05-22T09:27:09.473Z\",\n                    revokeDate: revokeDate.toISOString()//\"2020-05-21T09:27:09.473Z\"\n                }\n            });\n\n    }\n    // console.log(\"quiz do \");\n    return(\n        <div className={`game4-quiz__item show-overlay ${props.show ? 'active':''} `}>\n            <img className=\"d-block w-100\"\n                 src={`${files_endpoint}${encodeURI(props.quiz.cover)}`}\n                 alt={props.quiz.title}/>\n            <div className=\"game4-quiz__caption\">\n                <h2 className=\"text-uppercase\">{props.quiz.title}\n                    <span className=\"subtitle\">{props.quiz.subtitle}</span>\n                </h2>\n\n                <div className={\"duration\"}>\n                    <FontAwesomeIcon icon={['far','clock']} />\n                    {props.quiz.duration}\n                </div>\n\n                <div className=\"lead\" dangerouslySetInnerHTML={{__html:props.quiz.description}}></div>\n\n                <Button variant=\"game4-quiz\"\n                        onClick={onCLick}\n                        disabled={disabledStartBtn}>\n                    {language_bundle && language_bundle.btnStart}\n                </Button>\n            </div>\n            {\n                props.quiz.consents.length > 0 && props.cxs &&\n                <div className=\"game4-quiz__consent\">\n                    <h5>{language_bundle && language_bundle.consentTitle}</h5>\n                    <ul>\n                        {\n                            props.quiz.consents.map( consent =>{\n                                if(consent.actived)\n                                    return <Consent\n                                        key={consent.id}\n                                        id={consent.id}\n                                        checked={Object.keys(checked).includes(consent.id)}\n                                        setChecked={setChecked}\n                                        handleChange={handleChange}\n                                        cxs={props.cxs}\n                                        setGranted={setGranted}\n                                        granted={granted}\n                                        handleConsentStatus={handleConsentStatus}\n                                    />\n                                return <></>\n                            })\n                        }\n                    </ul>\n                </div>\n            }\n        </div>\n    );\n}\n\nQuiz.propTypes={\n    quiz:PropTypes.object.isRequired,\n    show:PropTypes.bool.isRequired,\n    onClickNext:PropTypes.func.isRequired,\n    showNext:PropTypes.bool.isRequired,\n    cxs:PropTypes.object\n}\n\nexport default Quiz;","import {gql} from 'apollo-boost';\n\n// const propsFragment = gql`\n//     fragment props on JCRNode{\n//         id:uuid\n//         key: property(language:$language, name:\"game4:quizKey\"){\n//             value\n//         }\n//         title:displayName(language:$language)\n//         subtitle: property(language:$language, name:\"game4:subtitle\"){\n//             value\n//         }\n//         description:property(language:$language,name:\"game4:description\"){\n//             value\n//         }\n//         duration:property(language:$language,name:\"game4:duration\"){\n//             value\n//         }\n//         cover: property(language:$language,name:\"game4:cover\"){\n//             node: refNode {\n//                 path\n//             }\n//         }\n//         consent: property(language:$language,name:\"game4:consentType\"){\n//             node: refNode {\n//                 uuid\n//             }\n//         }\n//         children{\n//             nodes {\n//                 id:uuid\n//                 type: primaryNodeType{\n//                     value:name\n//                 }\n//             }\n//         }\n//     }\n// `\n\nexport const GET_QNA = gql`\n    query getQna($workspace: Workspace!, $id: String!, $language: String!) {\n        response: jcr(workspace: $workspace) {\n            qna: nodeById(uuid: $id) {\n                id: uuid\n                title:displayName(language:$language)\n                question: property(language:$language, name:\"game4:question\"){\n                    value\n                }\n                help: property(language:$language,name:\"game4:help\"){\n                    value\n                }\n                nbExpectedAnswer: property(name:\"game4:nbExpectedAnswer\"){\n                    value\n                }\n                answers: property(language:$language,name:\"game4:answers\"){\n                    values\n                }\n                randomSelection: property(name:\"game4:randomSelection\"){\n                    value\n                }\n                notUsedForScore: property(name:\"game4:notUsedForScore\"){\n                    value\n                }\n                cover: property(name:\"game4:cover\"){\n                    node: refNode {\n                        path\n                    }\n                }\n                jExpField2Map: property(name:\"game4:jExpProperty\"){\n                    value\n                }\n\n            }\n        }\n    }\n`\n// ${propsFragment}\n\n\n","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {Form} from \"react-bootstrap\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\n\nconst Answer = (props) =>{\n    // const [checked,toggleChecked] = useState(props.answer.checked);\n    // const _ID_ = getRandomString(5,\"#aA\");\n\n    const isValid = props.answer.valid || (props.qna.notUsedForScore ? props.answer.checked : false);\n    return(\n        <li className={props.answer.checked?\"checked\":\"\"}>\n            <div className={`result ${isValid?\"valid\":\"\"}`}>\n                {isValid &&\n                <FontAwesomeIcon icon={['fas','check']}/>\n                }\n                {!isValid &&\n                <FontAwesomeIcon icon={['fas','times']}/>\n                }\n            </div>\n            <Form.Check\n                custom\n                type={props.qna.computedNbExpectedAnswer >1 ?\"checkbox\":\"radio\"}\n                name={props.qna.id}\n                id={props.answer.id}\n                label={props.answer.label}\n                onChange={props.handleChange}\n                checked={props.checked}\n            />\n        </li>\n    );\n};\nAnswer.propTypes={\n    qna:PropTypes.object.isRequired,\n    answer:PropTypes.object.isRequired,\n    checked:PropTypes.bool.isRequired,\n    handleChange:PropTypes.func.isRequired\n}\n\nexport default Answer;","const _WEAKREFERENCE_ = \"WEAKREFERENCE\";\n//TODO voir si avec SDL je peux passe l'URL des images!\nfunction getProperties(properties,context){\n    if(!properties) return;\n    return properties.reduce(function(bundle,property){\n        const key = property.name.split(\":\").pop();\n        let value = property.value || property.values;\n// console.log(\"property : \",property);\n        if(property.type === _WEAKREFERENCE_ &&\n            property.weakreference &&\n            property.weakreference.path\n        ){\n            property.weakreference.url=\n                `${context.files_endpoint}${encodeURI(property.weakreference.path)}`;\n            value = property.weakreference;\n        }\n\n        bundle[key]=value;\n        return bundle;\n    },{});\n};\n\n// function getWeakURL(filesEndpoint,nodePath){\n//     return `${filesEndpoint}${encodeURI(nodePath)}`;///encodeURIComponent()\n// };\n\nfunction getRandomString (length, format){\n    let mask = \"\";\n    if (format.indexOf(\"a\") > -1) mask += \"abcdefghijklmnopqrstuvwxyz\";\n    if (format.indexOf(\"A\") > -1) mask += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    if (format.indexOf(\"#\") > -1) mask += \"0123456789\";\n    if (format.indexOf(\"!\") > -1) mask += \"~`!@#$%^&*()_+-={}[]:\\\";'<>?,./|\\\\\";\n    let result = \"\";\n    for (let i = length; i > 0; --i) result += mask[Math.floor(Math.random() * mask.length)];\n    return result;\n};\n\nfunction getGQLWorkspace(workspace){\n    return workspace===\"default\"?\n        \"EDIT\":\n        workspace.toUpperCase()\n}\n\n\nexport {\n    getProperties,\n    getRandomString,\n    getGQLWorkspace\n}","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {Button} from \"react-bootstrap\";\n\nimport {useQuery} from \"@apollo/react-hooks\";\nimport get from \"lodash.get\";\nimport {JContext} from \"contexts\";\nimport uTracker from \"unomi-analytics\";\n\nimport {GET_QNA} from \"./QnaGraphQL\";\nimport Answer from \"./Answer\";\nimport {getRandomString} from \"misc/utils\";\n\nclass _Qna{\n    //NOTE be sure string value like \"false\" or \"true\" are boolean I use JSON.parse to cast\n    constructor(qnaData,quiz_validMark) {\n        // console.log(\"Warmup : \",quiz);\n        this.id= get(qnaData, \"id\");\n        this.title= get(qnaData, \"title\");\n        this.question= get(qnaData, \"question.value\", \"\");\n        this.help= get(qnaData, \"help.value\", \"\");\n        // this.nbExpectedAnswer= get(qnaData, \"nbExpectedAnswer.value\", \"\");\n        this.randomSelection= JSON.parse(get(qnaData, \"randomSelection.value\", false));\n        this.notUsedForScore= JSON.parse(get(qnaData, \"notUsedForScore.value\", false));\n        this.cover= get(qnaData, \"cover.node.path\", \"\");\n        this.jExpField2Map= get(qnaData, \"jExpField2Map.value\", \"\");\n        this.answers= get(qnaData, \"answers.values\", []).map(answer=>{\n            const id = getRandomString(5,\"#aA\");\n            const valid = answer.indexOf(quiz_validMark) === 0;\n            if(valid)\n                answer = answer.substring(quiz_validMark.length+1);//+1 is for space between mark and label\n\n            return {id,label:answer,checked:false,valid}\n        })\n        if(this.randomSelection)\n            this.answers.sort( (a,b) => a.id > b.id );\n\n        this.computedNbExpectedAnswer = this.answers.filter(answer => answer.valid).length;\n    };\n    // getNbExpectedAnswer(){\n    //     return this.answers.filter(answer => answer.valid).length;\n    // };\n\n    valid() {\n        console.log(\"qna isValid this.notUsedForScore : \",this.notUsedForScore);\n        if(this.notUsedForScore)\n            return true;\n\n        console.log(\"qna isValid start eval\");\n        const isValid = this.answers.reduce((result,answer)=>{\n            if(answer.valid)\n                result.push(answer.checked);\n            return result;\n        },[]).reduce((result,checked) => result && checked,true);\n        console.log(\"qna isValid : \",isValid);\n        return isValid;\n    };\n}\n\nconst Qna = (props) => {\n    const {gql_variables,files_endpoint,quiz_validMark,language_bundle} =  React.useContext(JContext);\n    const variables = Object.assign(gql_variables,{id:props.id})\n    const {loading, error, data} = useQuery(GET_QNA, {\n        variables:variables,\n    });\n\n    // const [answers, setAnswers] = React.useState([]);\n    const [qna, setQna] = React.useState({answers:[]});\n    const [disableSubmit, setDisableSubmit] = React.useState(true);\n    const [checked, setChecked] = React.useState([]);\n\n    React.useEffect(() => {\n\n        if(loading === false && data){\n            const qnaData = get(data, \"response.qna\", {});\n            // console.log(\"Qna \",qnaData.id,\" : init\");\n            setQna(new _Qna(qnaData,quiz_validMark));\n        }\n\n    }, [loading,data]);\n\n    React.useEffect(() => {\n        let disable = true;//used to handleDisableSubmit\n\n        qna.answers.forEach(answer=>{\n            answer.checked = checked.includes(answer.id);\n            if(answer.checked)\n                disable = false;\n        })\n        // console.log(\"qna.answers : \",qna.answers);\n        // setQna(qna);\n        setDisableSubmit(disable);\n\n    }, [checked]);\n\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    const handleChange= (e) => {\n        // console.log(\"handleChange : \",e.target.id);\n        // console.log(\"qna.computedNbExpectedAnswer : \",qna.computedNbExpectedAnswer);\n\n        if(qna.computedNbExpectedAnswer <= 1){//case radio, <=1 is required to manage question not used for score\n            setChecked(e.target.id)\n        }else {//case checkbox\n            const index = checked.indexOf(e.target.id);\n            if(index === -1){//checked\n                setChecked([...checked, e.target.id]);\n            }else{//unchecked\n                checked.splice(index,1);\n                setChecked([...checked]);\n            }\n        }\n    }\n\n    const handleSubmit = () => {\n        console.log(\"[handleSubmit] props.resultSet => \",props.resultSet);\n        console.log(\"[handleSubmit] ...props.resultSet => \",...props.resultSet);\n        console.log(\"[handleSubmit] qna.valid() => \",qna.valid());\n        props.setResultSet([...props.resultSet,qna.valid()]);\n        // console.log(\"[handleSubmit] qna.jExpField2Map => \",qna.jExpField2Map);\n        if(qna.jExpField2Map){\n            //Get response label\n            //TODO manage case multiple later\n            const values =\n                qna.answers\n                .filter(answers => answers.checked)\n                .reduce(\n                    (label,answer) =>\n                        (answer.label && 0 < answer.label.length)\n                            ?answer.label\n                            :null\n                    ,null\n                );\n\n            //if tracker is not initialized the track event is not send\n            // console.debug(\"[handleSubmit] update : \",qna.jExpField2Map,\" with values : \",values);\n            uTracker.track(\"updateVisitorData\",{\n                update : {\n                    propertyName:`properties.${qna.jExpField2Map}`,\n                    propertyValue:values\n                }\n            });\n        }\n    }\n\n    return(\n        <div className={`game4-quiz__item show-overlay ${props.show ? 'active':''} `}>\n            <img className=\"d-block w-100\"\n                 src={`${files_endpoint}${qna.cover}`}\n                 alt={qna.title}/>\n            <div className=\"game4-quiz__caption d-none d-md-block\">\n                <fieldset>\n                    <legend>{qna.question}\n                        <i>{qna.help}</i>\n                    </legend>\n                    <ol className=\"game4-quiz__answer-list\">\n                        {qna.answers.map((answer,i)=>\n                            <Answer\n                                key={i}\n                                qna={qna}\n                                answer={answer}\n                                checked={checked.includes(answer.id)}\n                                handleChange={handleChange}\n                            />)\n                        }\n                    </ol>\n\n                </fieldset>\n\n                <Button variant=\"game4-quiz\"\n                        onClick={handleSubmit}\n                        disabled={disableSubmit}>\n                    {language_bundle && language_bundle.btnSubmit}\n                </Button>\n\n            </div>\n        </div>\n    );\n}\n\nQna.propTypes={\n    id:PropTypes.string.isRequired,\n    show:PropTypes.bool.isRequired,\n    // quizKey:PropTypes.string.isRequired,\n    resultSet:PropTypes.array.isRequired,\n    setResultSet:PropTypes.func.isRequired\n}\n\nexport default Qna;","import {gql} from 'apollo-boost';\n\nexport const GET_WARMUP = gql`\n    query getWarmup($workspace: Workspace!, $id: String!, $language: String!) {\n        response: jcr(workspace: $workspace) {\n            warmup: nodeById(uuid: $id) {\n                id: uuid\n                title:displayName(language:$language)\n                subtitle: property(language:$language, name:\"game4:subtitle\"){\n                    value\n                }\n                content: property(language:$language,name:\"game4:content\"){\n                    value\n                }\n                duration: property(name:\"game4:qnaDuration\"){\n                    value\n                }\n                videoLink: property(name:\"game4:videoLink\"){\n                    value\n                }\n                videoExtPath: property(language:$language,name:\"game4:videoExtPath\"){\n                    value\n                }\n                videoIntPath: property(language:$language,name:\"game4:videoIntPath\"){\n                    node: refNode {\n                        path\n                    }\n                }\n                cover: property(name:\"game4:masterQnaCover\"){\n                    node: refNode {\n                        path\n                    }\n                }\n                children{\n                    nodes {\n                        id: uuid\n                        type: primaryNodeType{\n                            value:name\n                        }\n                    }\n                }\n    \n            }\n        }\n    }\n`","import React, {useContext, useRef} from 'react';\nimport PropTypes from \"prop-types\";\nimport {JContext} from \"contexts\";\n\nimport ReactPlayer from \"react-player\";\nimport uTracker from 'unomi-analytics';\n\nconst VideoPlayer = ({videoURL,warmupID})=>{\n    // const {content,jCustomer} =  useContext(JContext);\n    const {content} =  useContext(JContext);\n    // console.log(\"content : \",content);\n    // console.log(\"__jCustomer : \",window.__jCustomer);\n    // const {sessionId} = useContext(CXSContextJs);\n\n    // console.log(\"sessionId_Videoplayer : \",sessionId);\n    // const [progress,handleProgress] = useState();\n\n\n    const player = useRef(null);\n    // async function collectEvent({status}){\n    function collectEvent({status}){\n        console.log(\"collectEvent start uTracker: \",uTracker);\n        //if tracker is not initialized the track event is not send\n        uTracker.track(\"video\",{\n            id:content.id,\n            type:content.type,\n            game4Quiz:{//lesson is already map to string by Elastic so we cannot reuse this name\n                id:content.id,\n                type:content.type\n            },\n            game4Warmup:{\n                id:warmupID\n            },\n            game4Video:{\n                duration: player.current.getDuration(),\n                currentTime: player.current.getCurrentTime(),\n                status: status\n            }\n        });\n    };\n\n    // const onReadyHandler = () => {\n    //     console.log(\"onReady seekTo 4.2s\")\n    //     player.current.seekTo(4.2,\"seconds\");\n    // }\n    const onStartHandler = () => {\n        console.log(\"onStart seekTo 4.2s\")\n        // player.current.seekTo(4.2,\"seconds\");\n    }\n\n    const onPlayHandler = () => {\n        collectEvent({status:\"started\"});\n        console.log(\"onPlay called\");\n    };\n    const onEndedHandler = () => {\n        collectEvent({status:\"end\"});\n    };\n    const onPauseHandler = () => {\n        collectEvent({status:\"pause\"});\n    };\n    return (\n        <div className='player-wrapper'>\n            <ReactPlayer\n                ref={player}\n                className='react-player'\n                url={videoURL}\n                controls\n                width='100%'\n                height='100%'\n                // onReady={onReadyHandler}\n                onStart={onStartHandler}\n                // onProgress={(object)=> console.log(\"onProgress : \",object)}\n                onPlay={onPlayHandler}\n                // onSeek={(seconds)=> console.log(\"onSeek : \",seconds)}\n                // onDuration={(seconds)=> console.log(\"onDuration :\",seconds)}\n                onPause={onPauseHandler}\n                onEnded={onEndedHandler}\n            />\n        </div>\n    )\n}\n\nVideoPlayer.propTypes={\n    videoURL:PropTypes.string.isRequired,\n    warmupID:PropTypes.string.isRequired\n}\n\nexport default VideoPlayer;","import React, {useContext} from 'react';\nimport PropTypes from \"prop-types\";\nimport {Button} from \"react-bootstrap\";\n\nimport get from \"lodash.get\";\nimport {JContext} from \"contexts\";\nimport {GET_WARMUP} from \"./WarmupGraphQL\";\nimport VideoPlayer from \"components/VideoPlayer\";\n\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {useQuery} from \"@apollo/react-hooks\";\nimport Qna from \"components/Qna\";\n// import {getRandomString} from \"misc/utils\";\n// import { loader } from 'graphql.macro';\n\n\nclass _Warmup{\n    //NOTE be sure string value like \"false\" or \"true\" are boolean I use JSON.parse to cast\n    constructor(warmupData,files_endpoint) {\n        // console.log(\"Warmup : \",quiz);\n        this.id= get(warmupData, \"id\", \"\");\n        this.title= get(warmupData, \"title\", \"\");\n        this.subtitle= get(warmupData, \"subtitle.value\", \"\");\n        this.content= get(warmupData, \"content.value\", \"\");\n        this.duration= get(warmupData, \"duration.value\", \"\");\n        this.videoLink= get(warmupData, \"videoLink.value\", \"\");\n        this.videoIntPath = get(warmupData, \"videoIntPath.node.path\");\n\n        this.cover= get(warmupData, \"cover.node.path\", \"\");\n        this.childNodes=\n            get(warmupData,\"children.nodes\",[])\n            .map(node => {\n                return{\n                    id: get(node, \"id\"),\n                    type: get(node, \"type.value\")\n                }\n            });\n\n        if(this.videoLink)\n            this.video= this.videoIntPath ?\n                `${files_endpoint}${encodeURI(this.videoIntPath)}`:\n                get(warmupData, \"videoExtPath.value\")\n    };\n};\n\nconst Warmup = (props) => {\n    const {gql_variables,files_endpoint,language_bundle} =  useContext(JContext);\n    const variables = Object.assign(gql_variables,{id:props.id})\n    // const query = loader(\"./Warmup.graphql.disabled\");\n    const {loading, error, data} = useQuery(GET_WARMUP, {\n        variables:variables,\n    });\n\n    const [warmup, setWarmup] = React.useState({childNodes:[]});\n\n    // const {addItem2Slides} = props;\n    React.useEffect(() => {\n\n        if(loading === false && data){\n\n            const warmup=new _Warmup(get(data, \"response.warmup\", {}),files_endpoint);\n            // console.log(\"Warmup \",warmup.id,\" : init\");\n\n            const nodesIds = [];\n            warmup.childNodes.forEach(node => nodesIds.push(node.id));\n            props.addItem2Slides(nodesIds,warmup.id);\n\n            // console.debug(\"warmup.id : \",warmup.id,\"; warmup.video : \",warmup.video);\n            setWarmup(warmup);\n        }\n    },[loading,data]);\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n    // console.log(\"warmup.video global : \",warmup.video);\n\n    return(\n        <>\n            <div className={`game4-quiz__item show-overlay ${props.show ? 'active':''} `}>\n                <img className=\"d-block w-100\"\n                     src={`${files_endpoint}${warmup.cover}`}\n                     alt={warmup.title}/>\n\n                <div className=\"game4-quiz__caption d-none d-md-block\">\n                    <h2 className=\"text-uppercase\">{warmup.title}<span className=\"subtitle\">{warmup.subtitle}</span></h2>\n                    <div className=\"lead\" dangerouslySetInnerHTML={{__html:warmup.content}}></div>\n                    { warmup.video != null &&\n                        <div>\n                            <VideoPlayer\n                                videoURL={warmup.video}\n                                warmupID={warmup.id}\n                            />\n                        </div>\n                    }\n                    <Button variant=\"game4-quiz\"\n                            onClick={props.onClickNext}>\n                        {/*disabled={!props.showNext}*/}\n                        {language_bundle && language_bundle.btnQuestion}\n                    </Button>\n                </div>\n            </div>\n            {warmup.childNodes.map( node =>\n                <Qna\n                    key={node.id}\n                    id={node.id}\n                    show={props.index === node.id}\n                    // quizKey={props.quizKey}\n                    resultSet={props.resultSet}\n                    setResultSet={props.setResultSet}\n                />\n            )}\n        </>\n    );\n}\n\nWarmup.propTypes={\n    id:PropTypes.string.isRequired,\n    show:PropTypes.bool.isRequired,\n    // quizKey:PropTypes.string.isRequired,\n    resultSet:PropTypes.array.isRequired,\n    setResultSet:PropTypes.func.isRequired,\n    addItem2Slides:PropTypes.func.isRequired,\n    index:PropTypes.string.isRequired,\n    onClickNext:PropTypes.func.isRequired\n}\n\nexport default Warmup;","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport { CircularProgressbar } from 'react-circular-progressbar';\n\nimport {JContext} from \"contexts\";\n\nconst Score = (props) => {\n    const {files_endpoint} =  React.useContext(JContext);\n    // console.log(\"Score props.show :\",props.show);\n    return(\n        <div className={`game4-quiz__item show-overlay ${props.show ? 'active':''} `}>\n            <img className=\"d-block w-100\"\n                 src={`${files_endpoint}${encodeURI(props.quiz.cover)}`}\n                 alt={props.quiz.title}/>\n\n            <div className=\"game4-quiz__caption d-none d-md-block\">\n                <h2 className=\"text-uppercase\">{props.quiz.title}<span className=\"subtitle\">{props.quiz.subtitle}</span></h2>\n                <div className=\"game4-quiz__score-result col-6 offset-3 col-md-4 offset-md-4\">\n                    <CircularProgressbar value={props.score()} text={`${props.score()}%`}/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nScore.propTypes={\n    quiz:PropTypes.object.isRequired,\n    show:PropTypes.bool.isRequired,\n    score:PropTypes.func.isRequired\n}\n\nexport default Score;","import React from 'react'; //useEffect,useContext\nimport PropTypes from \"prop-types\";\n\nimport {Button, Container, Row} from 'react-bootstrap';\nimport { useQuery } from '@apollo/react-hooks';\n\nimport uTracker from 'unomi-analytics';\nimport get from \"lodash.get\";\n\nimport {JContext} from \"contexts\";\n\n// import JCustomer from \"jCustomer/index\";\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { faHandPointLeft,faCheckDouble,faCheck,faTimesCircle,faTimes,faBan } from '@fortawesome/free-solid-svg-icons';\nimport { faClock,faCheckCircle} from '@fortawesome/free-regular-svg-icons';\n\n//todo voir si je peux le desactiver dynamiquement\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'components/App.scss';\nimport 'react-circular-progressbar/dist/styles.css';\n\nimport {GET_QUIZ} from \"components/Quiz/QuizGraphQL.js\";\nimport Quiz from \"components/Quiz\"\nimport Qna from \"components/Qna\";\nimport Warmup from \"components/Warmup\";\nimport Score from \"components/Score\";\nimport {getRandomString} from \"misc/utils\";\n\n\n\nlibrary.add(\n    fab,\n    faClock,\n    faHandPointLeft,\n    faCheckCircle,\n    faCheckDouble,\n    faCheck,\n    faTimesCircle,\n    faTimes,\n    faBan\n);\n\nconst Indicator = ({active,handleSelect}) =>{\n    // console.log(\"active :\",active);\n    // console.log(\"handleSelect :\",handleSelect);\n    return(\n        <li className={`${active ? 'active':''}`}\n            onClick={handleSelect}>\n        </li>\n    )\n}\n\n\nclass _Quiz{\n    //NOTE be sure string value like \"false\" or \"true\" are boolean I use JSON.parse to cast\n    constructor(quizData) {\n        this.id= get(quizData, \"id\");\n        this.type= get(quizData, \"type.value\")\n        this.key = get(quizData, \"key.value\", {});\n        this.title= get(quizData, \"title\", \"\");\n        this.subtitle= get(quizData, \"subtitle.value\", \"\");\n        this.description= get(quizData, \"description.value\", \"\");\n        this.duration= get(quizData, \"duration.value\", \"\");\n        // this.ctaLink= get(quizData, \"ctaLink.value\", \"\");\n        this.cover= get(quizData, \"cover.node.path\", \"\");\n        this.consents= get(quizData, \"consents.nodes\", []).map(node =>{\n            return {\n                id:get(node,\"id\"),\n                actived:JSON.parse(get(node,\"actived.value\"))\n            }\n        });\n        this.childNodes = get(quizData,\"children.nodes\",[]).map(node =>{\n            return {\n                id: get(node, \"id\"),\n                type: get(node, \"type.value\")\n            };\n        });\n        this.scoreIndex= getRandomString(5,\"#aA\");\n    };\n}\n\nconst initLanguageBundle = quizData => {\n    const keys = [\n        \"btnStart\",\n        \"btnSubmit\",\n        \"btnQuestion\",\n        \"btnNextQuestion\",\n        \"btnShowResults\",\n        \"consentTitle\",\n        \"correctAnswer\",\n        \"wrongAnswer\"\n    ];\n    return keys.reduce((bundle,key)=>{\n        bundle[key] = get(quizData,`${key}.value`);\n        console.debug(\"bundle: \",bundle);\n        return bundle;\n    },{});\n}\n\n//NOPE ! TODO jCustomer/context.json -> context. jContext.value = {context,jCustomer}\nconst App = ({context})=> {\n    // console.log(\"App GET_QUIZ : \",GET_QUIZ);\n    const {loading, error, data} = useQuery(GET_QUIZ, {\n        variables:context.gql_variables,\n    });\n\n    const [quiz, setQuiz] = React.useState({consents:[],childNodes:[]});\n\n    const [showResult, setShowResult] = React.useState(false);\n    const [result, setResult] = React.useState(false);\n    const [resultSet, setResultSet] = React.useState([]);\n    const [slideIndex, setSlideIndex] = React.useState([]);\n    const [index, setIndex] = React.useState();\n    const [cxs, setCxs] = React.useState(null);\n\n    const addItem2Slides = (ids,parentId) =>\n        setSlideIndex(slideIndex => {\n            console.debug(\"addItem2Slides__setSlideIndex; ids : \",ids,\", parentId : \",parentId,\", slideIndex : \",slideIndex);\n\n            if (parentId && slideIndex.includes(parentId)) {\n                const position = slideIndex.indexOf(parentId) + 1;\n                slideIndex.splice(position, 0, ...ids);\n                return [...slideIndex];\n            } else {\n                return [...slideIndex, ...ids];\n            }\n        });\n\n    React.useEffect(() => {\n        console.debug(\"App Quiz init !\");\n        if(loading === false && data){\n            console.debug(\"App Quiz init Set Data!\");\n\n            const quizData = get(data, \"response.quiz\", {});\n            const quiz = new _Quiz(quizData);\n\n            context.language_bundle = initLanguageBundle(quizData);\n\n            const nodesIds = [quiz.id];\n            quiz.childNodes.forEach(node => nodesIds.push(node.id));\n            nodesIds.push(quiz.scoreIndex);\n\n            addItem2Slides(nodesIds);\n\n            setIndex(quiz.id);\n            setQuiz(quiz);\n\n            console.debug(\"App Quiz init\");\n\n            //init unomi tracker\n            if(context.gql_variables.workspace === \"LIVE\"){\n                uTracker.initialize({\n                    \"Apache Unomi\": {\n                        scope: context.scope,\n                        url: context.cdp_endpoint,\n                        sessionId:`qZ-${quiz.key}-${Date.now()}`\n                    }\n                });\n                uTracker.ready( () => {\n                    setCxs(window.cxs);\n                })\n            }\n\n\n            context.content={\n                id: quiz.id,\n                type: get(quizData, \"type.value\")\n            };\n        }\n    }, [loading,data]);\n\n    React.useEffect(() => {\n        //when an update occurs that means a new result was added. So it is time to show result\n        console.debug(\"useEffect resultSet : \",resultSet);\n\n        if(Array.isArray(resultSet) && resultSet.length >0){\n            const result = resultSet.slice(-1);\n\n            console.debug(\"resultSet useEffect setResult result: \",result);\n            console.debug(\"resultSet useEffect setResult ...result: \",...result);\n            setResult(...result);\n            setShowResult(true);\n        }\n\n    },[resultSet])\n\n    // console.log(`useQuery: loading ->${loading}; error-> ${error} ; data ->${data}`);\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n\n    const max = slideIndex.length -1;//quizChildNodes.length;//O is quiz child start at 1\n\n    const showNext =\n        slideIndex.indexOf(index) < max;\n\n    const showScore =\n        slideIndex.indexOf(index) === max-1;\n    // const showFinalResult =\n    //     index === max &&\n    //     quizDone;\n\n    // const handleClose = () => {\n    //     if(modalIndex === maxQuizIndex)\n    //         setQuizDone(true);\n    //     setModalIndex(-2);\n    // }\n    // const handleStart = () => setModalIndex(startIndex);\n\n    // No prev button in this quiz\n    // const onClickPrev = () => {\n    //     if(index.indexOf(indexValue) > 0)\n    //         setIndex(index-1);\n    // }\n\n    const onClickNext = () => {\n        setShowResult(false);\n        console.log(\"index : \",index);\n        const current = slideIndex.indexOf(index);\n        console.log(\"current : \",current);\n        if(current < max)\n            setIndex(slideIndex[current+1]);\n\n        //keep track of result in cdp\n        if(current+1 === max)\n            uTracker.track(\"setQuizScore\",{\n                score:`${quiz.key}${context.score_splitPattern}${getFinalScore()}`\n            })\n\n    }\n\n    const handleSelect = (selectedIndex, e) => {\n        setIndex(selectedIndex);\n    };\n\n    const getFinalScore = () => {\n        const goodAnswers = resultSet.filter(result => result).length;\n        const answers = resultSet.length;\n        return Math.floor((goodAnswers/answers)*100);\n    }\n\n    return (\n        <JContext.Provider value={context}>\n            <Container>\n                <Row>\n                    <div className={`game4-quiz slide ${showResult?\"show-result\":\"\"}`}>\n                        <div className=\"game4-quiz__header\">\n                            <span className=\"game4-quiz__header-result\">\n                                {result &&\n                                    context.language_bundle &&\n                                    context.language_bundle.correctAnswer}\n                                {!result &&\n                                    context.language_bundle &&\n                                    context.language_bundle.wrongAnswer}\n                            </span>\n\n                            <Button variant=\"game4-quiz-header\"\n                                    onClick={onClickNext}\n                                    disabled={!showNext}>\n                                {!showScore &&\n                                    context.language_bundle &&\n                                    context.language_bundle.btnNextQuestion}\n                                {showScore &&\n                                    context.language_bundle &&\n                                    context.language_bundle.btnShowResults}\n                            </Button>\n\n                        </div>\n\n                        <ol className=\"game4-quiz__indicators\">\n                            {slideIndex.map( itemId =>\n                                <Indicator\n                                    key={itemId}\n                                    active={index=== itemId}\n                                    handleSelect={()=>handleSelect(itemId)}\n                                />\n                            )}\n                        </ol>\n\n                        <div className=\"game4-quiz__inner\">\n                            <Quiz\n                                key={quiz.id}\n                                quiz={quiz}\n                                show={ index===quiz.id }\n                                onClickNext={onClickNext}\n                                showNext={showNext}\n                                cxs={cxs}\n                            />\n                            {quiz.childNodes.map( (node,i) => {\n                                if(node.type === context.cnd_type.QNA)\n                                    return <Qna\n                                            key={node.id}\n                                            id={node.id}\n                                            show={index === node.id}\n                                            // quizKey={quiz.key}\n                                            resultSet={resultSet}\n                                            setResultSet={setResultSet}\n                                        />\n\n                                if(node.type === context.cnd_type.WARMUP)\n                                    return <Warmup\n                                        key={node.id}\n                                        id={node.id}\n                                        show={index === node.id}\n                                        // quizKey={quiz.key}\n                                        resultSet={resultSet}\n                                        setResultSet={setResultSet}\n                                        addItem2Slides={addItem2Slides}\n                                        index={index}\n                                        onClickNext={onClickNext}\n                                    />\n                                return <p className=\"text-danger\">node type {node.type} is not supported</p>\n                                })\n                            }\n                            <Score\n                                quiz={quiz}\n                                show={index === quiz.scoreIndex}\n                                score={getFinalScore}\n                            />\n                        </div>\n                    </div>\n                </Row>\n            </Container>\n        </JContext.Provider>\n    );\n};\n\nApp.propTypes={\n    context:PropTypes.object.isRequired\n}\n\nexport default App;\n","import React from 'react';\nimport PropTypes from \"prop-types\";\n\nconst Ajv = ({item,errors})=> {\n    return(\n        <div>\n            <h1>Validation errors</h1>\n            <p>An error occurred when validating <b>{item}</b></p>\n            <ul>\n                {errors.map( (error,i) =>\n                    <li>\n                        {error.dataPath} : {error.message}\n                    </li>)\n                }\n            </ul>\n        </div>\n    )\n}\n\nAjv.propTypes={\n    item:PropTypes.string.isRequired,\n    errors:PropTypes.array.isRequired\n};\n\nexport default Ajv;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const validMark=\"[*]\";\nconst score_splitPattern=\"::\";\n\nconst workspace = [\"default\",\"live\"];\nconst cnd_type = {\n    QNA:\"game4nt:qna\",\n    WARMUP:\"game4nt:warmup\"\n}\nconst consent_status={\n    GRANTED:\"GRANTED\",\n    DENIED:\"DENIED\",\n    REVOKED:\"REVOKED\"\n};\n\nexport {\n    workspace,\n    cnd_type,\n    validMark,\n    consent_status,\n    score_splitPattern\n}","// import jCustomer from \"./definitions/jCustomer\";\n// import jContent from \"./definitions/jContent\";\n// import gql from \"./definitions/gql\";\nimport {workspace} from \"douane/lib/config\";\n\nexport default{\n    context:{\n        title:\"context validation schema \",\n        description:\"context is an object provided by the page in charge to load the app\",\n        // definitions: {\n        //     jContent:jContent,\n        //     jCustomer:jCustomer,\n        //     gql:gql\n        // },\n        type:\"object\",\n        // properties:{\n        //     jContent:{$ref:\"#jContent\"},\n        //     gql:{$ref:\"#gql\"},\n        //     jCustomer:{$ref:\"#jCustomer\"}\n        // },\n        properties:{\n            host:{\n                type:\"string\",\n                format:\"uri\",\n                default:process.env.REACT_APP_JCONTENT_HOST || \"http://localhost:8080\"\n            },\n            workspace:{\n                type:\"string\",\n                enum:workspace,\n                default:process.env.REACT_APP_JCONTENT_WORKSPACE || workspace[1]//\"live\"\n            },\n            scope:{ type:\"string\",pattern:\"[a-zA-Z0-9-_]+\"},//iso\n            files_endpoint:{\n                type:\"string\",\n                format:\"uri\",\n                default:process.env.REACT_APP_JCONTENT_FILES_ENDPOINT || \"http://localhost:8080/files/live\"\n            },\n            gql_endpoint:{\n                type:\"string\",\n                format:\"uri\",\n                default:process.env.REACT_APP_JCONTENT_GQL_ENDPOINT || \"http://localhost:8080/modules/graphql\"\n            },\n            gql_authorization:{\n                type:\"string\",\n                // default:process.env.REACT_APP_JCONTENT_GQL_AUTH || \"Basic cm9vdDpyb290\"\n            },\n            gql_variables:{\n                type:\"object\",\n                properties:{\n                    id:{type:\"string\"},//\"3ff7b68c-1cfa-4d50-8377-03f19db3a985\"\n                    language:{type:\"string\",pattern:\"[a-z]{2}(?:_[A-Z]{2})?\"}//\"fr\" or \"fr_FR\"\n                },\n                required: [\"id\", \"language\"]\n            },\n            cdp_endpoint:{\n                type:\"string\",\n                format:\"uri\",\n                default:process.env.REACT_APP_JCUSTOMER_ENDPOINT //could be null in case of edit!\n            }//,\n            // language_bundle:{\n            //     type:\"object\",\n            //     properties:{\n            //         btnStart:{type:\"string\"},//\"Démarrer\",\n            //         btnSubmit:{type:\"string\"},//\"Soumettre\",\n            //         btnQuestion:{type:\"string\"},//\"Question\",\n            //         btnNextQuestion:{type:\"string\"},//\"Question suivante\",\n            //         btnShowResults:{type:\"string\"},//\"Mon score\",\n            //         consentTitle:{type:\"string\"},//\"Consentement\",\n            //         correctAnswer:{type:\"string\"},//\"Correcte\",\n            //         wrongAnswer:{type:\"string\"}//\"Incorrecte\"\n            //     },\n            //     required: [\n            //         \"btnStart\",\n            //         \"btnSubmit\",\n            //         \"btnQuestion\",\n            //         \"btnNextQuestion\",\n            //         \"btnShowResults\",\n            //         \"consentTitle\",\n            //         \"correctAnswer\",\n            //         \"wrongAnswer\"\n            //     ],\n            //     additionalProperties:false\n            // }\n        },\n        required: [\n            \"host\",\n            \"workspace\",\n            \"scope\",\n            \"files_endpoint\",\n            \"gql_endpoint\",\n            // \"gql_authorization\",\n            \"gql_variables\",\n            \"cdp_endpoint\",\n            // \"language_bundle\"\n        ],\n        additionalProperties:false\n    }\n}","import * as Ajv from \"ajv\";\nimport schema from  \"./lib/schema\"\nimport {getGQLWorkspace} from \"misc/utils\"\nimport {cnd_type,validMark,consent_status,score_splitPattern} from \"douane/lib/config\";\n\nconst ajv = new Ajv({useDefaults:true});\n//TODO le try catch doit etre fait ici et un component react doit etre retourne\nconst contextValidator = (context) =>{\n\n    const valid = ajv.validate(schema.context, context);\n    if (!valid)\n        // throw new Error(`An error occurred during the validation of context object, errors : ${JSON.stringify(ajv.errors)}`);\n        throw {item:\"Context configuration object\",errors:ajv.errors};\n\n    context.gql_variables.workspace = getGQLWorkspace(context.workspace);\n    context.cnd_type=cnd_type;\n    context.consent_status=consent_status;\n    context.quiz_validMark=validMark;\n    context.score_splitPattern=score_splitPattern;\n    return context;\n}\n\nexport {\n    contextValidator\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'components/App';\nimport AjvError from \"components/Error/Ajv\";\n\nimport * as serviceWorker from 'misc/serviceWorker';\n\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport {contextValidator} from \"douane\";\n\nimport 'index.css';\n\nconst render=(target,context)=>{\n  try{\n    // console.log(\"context : \",JSON.stringify(context));\n    context = contextValidator(context);\n    const headers={};\n    if(context.gql_authorization)\n      headers.Authorization=context.gql_authorization;\n\n    const client = new ApolloClient({\n      uri:context.gql_endpoint,\n      headers\n    })\n\n    // console.log(\"lesson : \",src.data.jcr.lesson);\n    ReactDOM.render(\n      <ApolloProvider client={client}>\n        <App context={context}/>\n      </ApolloProvider>,\n      document.getElementById(target)\n    );\n\n  }catch(e){\n    console.error(\"error : \",e);\n    //TODO create a generic error handler\n    ReactDOM.render(\n      <AjvError\n        item={e.item}\n        errors={e.errors}\n      />,\n      document.getElementById(target)\n    );\n  }\n}\n\nwindow.quizUIApp = render;\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}